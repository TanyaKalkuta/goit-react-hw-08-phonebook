{"version":3,"sources":["redux/phonebook/phonebook-action.js","routes.js","Component/Navigation/Navigation.js","Component/AuthNav/AuthNav.js","Component/UserMenu/default-avatar.png","Component/UserMenu/UserMenu.js","Component/AppNavBar/AppNavBar.js","Component/Loader/Loader.js","Component/PrivateRoute.js","Component/PublicRoute.js","App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js","Component/UserMenu/UserMenu.module.css","Component/Container/Container.js","Component/AppNavBar/AppNavBar.module.css","Component/Container/Container.module.css"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","routes","home","register","login","contacts","connect","state","isAuthenticated","authSelectors","getIsAuthenticated","className","exact","to","activeClassName","AuthNav","mapDispatchToProps","onLogout","authOperations","logOut","name","getUserName","avatar","defaultAvatar","styles","container","src","alt","Button","type","onClick","variant","color","s","Header","Spiner","height","width","Component","component","redirectTo","routeProps","render","props","restricted","HomeView","lazy","RegisterView","LoginView","ContactsView","App","this","onGetCurrentUser","Container","fallback","path","getCurrentUser","items","createReducer","_","payload","map","contact","includes","alert","filter","id","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","StrictMode","document","getElementById","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","email","user","authActions","token","setError","error","axios","defaults","baseURL","headers","common","Authorization","credentials","dispatch","a","post","response","data","message","logIn","getState","persistToken","get","module","exports","children"],"mappings":"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","file":"static/js/main.8694e299.chunk.js","sourcesContent":["// import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","const routes = {\r\n  home: '/',\r\n  register: '/register',\r\n  login: '/login',\r\n  contacts: '/contacts',\r\n};\r\nexport default routes;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from '../../routes';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../../redux/auth';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({ isAuthenticated }) => {\r\n  return (\r\n    <nav>\r\n      <ul className=\"Navbar\">\r\n        <li>\r\n          <NavLink\r\n            exact\r\n            to={routes.home}\r\n            className=\"NavLink\"\r\n            activeClassName=\"NavLink--active\"\r\n          >\r\n            Home\r\n          </NavLink>\r\n        </li>\r\n        {isAuthenticated && (\r\n          <li>\r\n            <NavLink\r\n              to={routes.contacts}\r\n              className=\"NavLink\"\r\n              activeClassName=\"NavLink--active\"\r\n            >\r\n              Contacts\r\n            </NavLink>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navigation);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// import s from './AuthNav.module.css';\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <ul className=\"Navbar\">\r\n      <li\r\n      // className={s.ItemAuth}\r\n      >\r\n        <NavLink\r\n          to=\"/register\"\r\n          exact\r\n          className=\"NavLink\"\r\n          activeClassName=\"NavLink--active\"\r\n        >\r\n          Сheck in\r\n        </NavLink>\r\n      </li>\r\n      <li\r\n      // className={s.ItemNav}\r\n      >\r\n        <NavLink\r\n          to=\"/login\"\r\n          exact\r\n          className=\"NavLink\"\r\n          activeClassName=\"NavLink--active\"\r\n        >\r\n          Login\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;\r\n","export default __webpack_public_path__ + \"static/media/default-avatar.a9d44b06.png\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../../redux/auth';\r\nimport defaultAvatar from '../UserMenu/default-avatar.png';\r\nimport styles from './UserMenu.module.css';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst UserMenu = ({ name, avatar, onLogout }) => (\r\n  <div className={styles.container}>\r\n    <img src={avatar} alt=\"Avatar\" className={styles.avatar} />\r\n    <span className={styles.name}>Welcome, {name}</span>\r\n    <Button type=\"button\" onClick={onLogout} variant=\"outlined\" color=\"primary\">\r\n      Logout\r\n    </Button>\r\n  </div>\r\n);\r\nconst mapStateToProps = state => ({\r\n  name: authSelectors.getUserName(state),\r\n  avatar: defaultAvatar,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogout: authOperations.logOut,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n\r\n// const UserMenu = ({ name, avatar, onLogout }) => {\r\n//   return (\r\n//     <div className={s.container}>\r\n//       <div>\r\n//         <img src={avatar} alt=\"Avatar\" className={s.avatar} />\r\n//       </div>\r\n//       <span className={s.name}>\r\n//         Welcome, {name.slice(0, 1).toUpperCase()}\r\n//         {name.slice(1)}\r\n//       </span>\r\n//       <Button\r\n//         type=\"button\"\r\n//         onClick={onLogout}\r\n//         style={{ marginTop: '05px' }}\r\n//         variant=\"contained\"\r\n//         color=\"primary\"\r\n//       >\r\n//         Logout\r\n//       </Button>\r\n//     </div>\r\n//   );\r\n// };\r\n// const mapStateToProps = state => ({\r\n//   name: getUserName(state),\r\n//   avatar: defaultAvatar,\r\n// });\r\n\r\n// const mapDispatchToProps = {\r\n//   onLogout: logOut,\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Navigation from '../Navigation';\r\nimport AuthNav from '../AuthNav';\r\nimport UserMenu from '../UserMenu';\r\nimport { authSelectors } from '../../redux/auth';\r\nimport s from './AppNavBar.module.css';\r\n\r\nconst AppBar = ({ isAuthenticated }) => {\r\n  return (\r\n    <header className={s.Header}>\r\n      <Navigation />\r\n      {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppBar);\r\n","import React from 'react';\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst Spiner = () => {\r\n    return (\r\n         <div className='spinner-conteiner'>\r\n            <Loader\r\n             type=\"Circles\"\r\n             color=\"#00BFFF\"\r\n             height={100}\r\n            width={100} />\r\n        </div>\r\n    )\r\n}\r\nexport default Spiner;","import { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n/**\r\n * - Если маршрут приватный, и пользователь залогинен, рендерит компонент,\r\n * - В противном случае рендерит редирект на /login\r\n */\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n    }\r\n  />\r\n);\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import React, { Component, Suspense, lazy } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Switch } from 'react-router-dom';\r\nimport routes from './routes';\r\nimport './styles.css';\r\nimport AppBar from './Component/AppNavBar';\r\nimport Spinner from './Component/Loader';\r\nimport Container from './Component/Container';\r\nimport { authOperations } from './redux/auth';\r\nimport PrivateRoute from './Component/PrivateRoute';\r\nimport PublicRoute from './Component/PublicRoute';\r\n// import ContactForm from './Component/ContactForm';\r\n// import Filter from './Component/Filter';\r\n// import ContactList from './Component/ContactList';\r\nconst HomeView = lazy(() =>\r\n  import('./views/HomeView.js' /* webpackChunkName: \"home-view\" */),\r\n);\r\nconst RegisterView = lazy(() =>\r\n  import('./views/RegisterView' /*webpackChunkName: \"register-view\" */),\r\n);\r\nconst LoginView = lazy(() =>\r\n  import('./views/LoginView' /*webpackChunkName: \"login-view\" */),\r\n);\r\nconst ContactsView = lazy(() =>\r\n  import('./views/ContactsView' /*webpackChunkName: \"contacts-view\" */),\r\n);\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onGetCurrentUser();\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <AppBar />\r\n        <Container>\r\n          <Suspense fallback={<Spinner />}>\r\n            <Switch>\r\n              <PublicRoute exact path={routes.home} component={HomeView} />\r\n              <PublicRoute\r\n                path={routes.register}\r\n                restricted\r\n                redirectTo={routes.home}\r\n                component={RegisterView}\r\n              />\r\n              <PublicRoute\r\n                path={routes.login}\r\n                restricted\r\n                redirectTo={routes.home}\r\n                component={LoginView}\r\n              />\r\n              <PrivateRoute\r\n                path={routes.contacts}\r\n                component={ContactsView}\r\n                redirectTo={routes.login}\r\n              />\r\n            </Switch>\r\n          </Suspense>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onGetCurrentUser: authOperations.getCurrentUser,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import contacts from '../../json/contacts.json';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n} from './phonebook-action';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  // [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [addContactSuccess]: (state, { payload }) => {\r\n    if (state.map(contact => contact.name).includes(payload.name)) {\r\n      return alert(`${payload.name} is already exist`);\r\n    }\r\n    return [...state, payload];\r\n  },\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './phonebook/phonebook-reducer';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport { authReducer } from './auth';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: persistReducer(persistConfig, rootReducer),\r\n// });\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport './styles.css';\nimport 'modern-normalize/modern-normalize.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});\r\n","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst register = credentials => async dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n  try {\r\n    const response = await axios.post('/users/signup', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n};\r\n\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\nconst logOut = () => async dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistToken }, //то же , что и state.auth.token//\r\n  } = getState();\r\n\r\n  if (!persistToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistToken);\r\n\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('users/current');\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  register,\r\n  logIn,\r\n  logOut,\r\n  getCurrentUser,\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nconst getIsAuthenticated = state => state.auth.isAuthenticated;\r\n\r\nconst getUserName = state => state.auth.user.name;\r\n\r\nexport default {\r\n  getIsAuthenticated,\r\n  getUserName,\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserMenu_container__1qFBY\",\"avatar\":\"UserMenu_avatar__2cE-U\",\"name\":\"UserMenu_name__1oX2L\"};","import React from 'react';\r\nimport styles from './Container.module.css'\r\n\r\nconst Container = ({ children }) =>\r\n    <div className={styles.Container}>{children}</div>\r\n    \r\nexport default Container;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"AppNavBar_Header__2MHWu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__T3cIF\"};"],"sourceRoot":""}